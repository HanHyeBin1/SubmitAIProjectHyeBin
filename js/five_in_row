// 과제 (1)
// 주제 : 자바스크립트로 오목게임 만들어보기
// 세부내용
// 1. Nodejs와 함께 콘솔창에서 실행되도록 사용자 입출력 도구를 사용한다.
// 2. 오목판 사이즈는 30x30으로 고정한 후 정사각형의 형태의 오목판을 만든다.
// 3. 사용자 입력 도구에 좌표값 (15,15)라고 입력하여 바둑돌을 둔다.
// 4. 흑은 1로, 백은 0으로 표기하여 화면에 흑과 백이
// 번갈아가면서 두도록 입력 도구가 계속 뜨도록 입력 받는다.
// 5. 오목 규칙에 따라 5줄이 먼저 완성되면 “Game over”와 같이
// 누가 이겼는지 승패를 알리는 출력을 만든다.
// 6. 승패가 계속 나지 않을 경우 실행 후 5분이 지나면 자동 종료시킨다.
// ** 제출 방법 : 작성된 js 파일과 추가된 js 파일 그리고 설치된 module을 메모장에 남겨 제출한다.

//값 입력 받기 : nodejs 내장된 모듈 사용
const readline = require('readline');
const inputValueInterface = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

//2차원 배열 선언(오목판 그리기) : 30X30
const size = 30;
const arr = [];

for (let i=0; i < size; i++) {
    arr[i] = [];
    for(let j=0; j < size; j++) {
        arr[i][j] = 0;
    }
}

// 5분 타이머 함수
function startTimer() {
    const fiveMinutes = 5 * 60 * 1000; // 5분을 밀리초로 변환
    setTimeout(() => {
      console.log("게임이 종료되었습니다. 시간 초과!");
      inputValueInterface.close(); // 타이머가 종료되면 입력 도구를 닫음
    }, fiveMinutes);
}

//플레이어 선언
let currentPlayer = 1;

//입력 받고 게임하는 함수
function playGame(){
    startTimer();
    inputValueInterface.question("(x,y) 좌표값을 입력해주세요 : ", (input) => {
        let coords = input.split(',');
        let x = parseInt(coords[0].trim());
        let y = parseInt(coords[1].trim());

        if(isValidPosition(x,y)) {
            if(arr[x][y] === 0) {
                arr[x][y] = currentPlayer;
                if(checkWin()) {
                    console.log("GameOver! 승자 >> ", currentPlayer === 1 ? "흑" : "백");
                    inputValueInterface.close();
                    return;
                }
                switchPlayer();
            }
            else {
                console.log("해당 위치는 이미 놓인 돌이 있습니다.");
            }
        }
        else {
            console.log("잘못된 좌표값 입니다. 다시 입력해주세요.")
        }

        playGame(); // 다음 턴으로 진행
    })
}

//바둑돌 위치 확인
function isValidPosition(x,y) {
    return x>=0 && x<size && y>=0 && y<size;
}

//플레이어 전환
function switchPlayer() {
    console.log("플레이어 전환");
    currentPlayer = currentPlayer === 1 ? 0: 1;
}

//승패 확인
function checkWin() {
    const directions = [[0, 1], [1, 0], [1, 1], [-1, 1]]; // 가로, 세로, 대각선을 저장하여 위치를 검사

    for(let i=0; i < size; i++) { // 이중 반복문을 통해 전부 검사
        for(let j=0; j < size; j++) {
            if (arr[i][j] !== 0) { //만약 현재 위치에 돌이 있다면, 즉 빈 칸이 아니라면 4가지 방향을 이용하여 5개의 돌이 연속되어 있는지를 검사
                for (let direction of directions) { //4가지 방향을 이용해서 5개의 돌이 연속으로 있는지 확인
                    const [dx, dy] = direction; //direction 배열에서 방향을 가져와서 dx, dy로 각각 할당
                    let count = 1; //현재 위치에 돌이 있으므로 count를 1로 초기화

                    for (let k = 1; k < 5; k++) {
                        const nx = i + k * dx;
                        const ny = j + k * dy;

                        if (nx >= 0 && nx < size && ny >= 0 && ny < size && arr[nx][ny] === arr[i][j]) {
                            count++; //새로운 좌표가 오목판 내에 있고, 그 위치에 현재 위치와 동일한 돌이 있다면 count 증가
                        } else {
                            break;
                        }
                    }

                    if (count === 5) {
                        return true; // 승리 조건 충족
                    }
                }
            }
        }
    }

    return false;
}

//게임시작
playGame();